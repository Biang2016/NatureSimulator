//%GenSrc:1:P+D8lcFaO0uyxGpa3x2lyA
/*
 * This code was generated by InstinctAI.
 *
 * It is safe to edit this file.
 */

using com.kupio.instinctai;

namespace instinctai.usr.behaviours
{
    using UnityEngine;

    public partial class Dot : MonoBehaviour
    {
        private float size;

        public float Size
        {
            get { return size; }
            set
            {
                size = value;
                transform.localScale = Vector3.one * size / 20f;
            }
        }

        public float MateMatureSizeThreshold;
        public float MateSizeDiffThreshold;
        public float MaxSize;
        public float[] ChildrenSizeComposition;

        public Color DotColor;
        public CircleCollider2D Collider2D;
        [SerializeField] private SpriteRenderer SpriteRenderer;
        [SerializeField] private Rigidbody2D Rigidbody2D;

        public float BasicSpeed => Mathf.Max(40, 50 / Size) * NatureController.Instance.NormalSpeed;

        public Species.SpeciesTypes M_SpeciesType;
        public Species My_Speceis;

        public void Init(float _size, Species species)
        {
            Size = _size;
            My_Speceis = species;
            SpriteRenderer.color = NatureController.Instance.ColorSet[(int) M_SpeciesType];
        }

        public bool IsPreyOf(Dot o)
        {
            if (o.M_SpeciesType != M_SpeciesType)
            {
                return Size < NatureController.Instance.EatSizeThreshold * o.Size;
            }
            else
            {
                return false;
            }
        }

        public bool IsPredatorOf(Dot o)
        {
            if (o.M_SpeciesType != M_SpeciesType)
            {
                return Size * NatureController.Instance.EatSizeThreshold > o.Size;
            }
            else
            {
                return false;
            }
        }

        public bool IsMateOf(Dot o)
        {
            if (o.M_SpeciesType == M_SpeciesType && o.Size > MateMatureSizeThreshold && Size > MateMatureSizeThreshold)
            {
                return ((1f - o.MateSizeDiffThreshold) < (Size / o.Size)) && ((Size / o.Size) < (1f + o.MateSizeDiffThreshold));
            }
            else
            {
                return false;
            }
        }

        public NodeVal GrowUp()
        {
            Size = Mathf.Min(MaxSize, 0.05f * Size * Time.deltaTime + Size);
            return NodeVal.Success;
        }

        private void OnCollisionEnter2D(Collision2D other)
        {
            Dot o = other.gameObject.GetComponent<Dot>();
            if (o != null)
            {
                if (o.IsPreyOf(this))
                {
                    Size = (int) Mathf.Sqrt(Size * Size + o.Size * o.Size * NatureController.Instance.NutritionRatio);
                    NatureController.Instance.DestoryDot(o);
                    return;
                }

                if (o.IsMateOf(this))
                {
                    Dot mother = o.Size > Size ? o : this;
                    Dot father = o.Size > Size ? this : o;
                    float motherLeftSize = 1f;
                    for (int i = 0; i < ChildrenSizeComposition.Length; i++)
                    {
                        motherLeftSize -= ChildrenSizeComposition[i] * ChildrenSizeComposition[i];
                        My_Speceis.SpawnDot(ChildrenSizeComposition[i] * mother.Size, transform.position);
                    }

                    mother.Size = Mathf.Sqrt(motherLeftSize) * mother.Size;
//                    father.Size /= 1.2f;
                    return;
                }
            }
        }

        #region AvoidPredators

        public Vector3 escapingFrom = new Vector3(0, 0);

        public NodeVal FindPredators()
        {
            Dot predator = NatureController.Instance.FindNearestPredator(this);
            if (predator)
            {
                escapingFrom = predator.transform.position;
                return NodeVal.Success;
            }
            else
            {
                return NodeVal.Fail;
            }
        }

        public NodeVal MoveToEscape()
        {
            wanderDestination = Vector3.zero;
            Rigidbody2D.velocity = Vector3.Normalize(-escapingFrom + transform.position) * BasicSpeed * NatureController.Instance.EscapingSpeedFactor;
            return NodeVal.Success;
        }

        #endregion

        #region ChasePreys

        public Vector3 preyLocation = new Vector3(0, 0);

        public NodeVal FindPreys()
        {
            Dot prey = NatureController.Instance.FindNearestPrey(this);
            if (prey)
            {
                preyLocation = prey.transform.position;
                return NodeVal.Success;
            }
            else
            {
                return NodeVal.Fail;
            }
        }

        public NodeVal MoveToPrey()
        {
            wanderDestination = Vector3.zero;
            Rigidbody2D.velocity = Vector3.Normalize(preyLocation - transform.position) * BasicSpeed * NatureController.Instance.ChasingSpeedFactor;
            return NodeVal.Success;
        }

        #endregion

        #region  Wandering

        public Vector3 wanderDestination = new Vector3(0, 0);

        public NodeVal Wander()
        {
            if (wanderDestination.Equals(Vector3.zero))
            {
                float x = Random.Range(-960, 960f);
                float y = Random.Range(-540, 540f);
                wanderDestination = new Vector2(x, y);
            }

            return NodeVal.Success;
        }

        public NodeVal MoveToWander()
        {
            Rigidbody2D.velocity = Vector3.Normalize(wanderDestination - transform.position) * BasicSpeed * NatureController.Instance.WanderingSpeedFactor;
            return NodeVal.Success;
        }

        #endregion

        #region Mate

        public Vector3 mateDestination = new Vector3(0, 0);

        public NodeVal FindMate()
        {
            if (Size < MateMatureSizeThreshold)
            {
                return NodeVal.Fail;
            }

            Dot mateDot = My_Speceis.FindNearestMate(this);
            if (mateDot != null)
            {
                mateDestination = mateDot.transform.position;
                return NodeVal.Success;
            }
            else
            {
                return NodeVal.Fail;
            }
        }

        public NodeVal MoveToMate()
        {
            wanderDestination = Vector3.zero;
            Rigidbody2D.velocity = Vector3.Normalize(mateDestination - transform.position) * BasicSpeed * NatureController.Instance.FindingMateSpeedFactor;
            return NodeVal.Success;
        }

        #endregion
    }
}